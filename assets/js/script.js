/**
 * ===== LEONAR CLIENT - –ì–û–õ–û–í–ù–ò–ô JAVASCRIPT –§–ê–ô–õ =====
 * –¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –≤—Å—é —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Å–∞–π—Ç—É
 */

// ===== –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü =====
let isMenuOpen = false;
let scrollPosition = 0;

// ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ü–†–ò –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ü –°–¢–û–†–Ü–ù–ö–ò =====
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Leonar Client —Å–∞–π—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
    initializeNavigation();
    initializeFAQ();
    initializeScrollEffects();
    initializeAnimations();
    initializeButtons();

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—ñ
    console.log(`
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë          LEONAR CLIENT               ‚ïë
    ‚ïë     –ù–∞–π–∫—Ä–∞—â–∏–π Minecraft –∫–ª—ñ—î–Ω—Ç       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `);
});

// ===== –ù–ê–í–Ü–ì–ê–¶–Ü–Ø –¢–ê –ú–û–ë–Ü–õ–¨–ù–ï –ú–ï–ù–Æ =====
function initializeNavigation() {
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const navMenu = document.querySelector('.nav-menu');
    const navLinks = document.querySelectorAll('.nav-link');

    // –ú–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é toggle
    if (mobileToggle) {
        mobileToggle.addEventListener('click', toggleMobileMenu);
    }

    // –ü–ª–∞–≤–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å
    navLinks.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetSection = document.querySelector(targetId);

            if (targetSection) {
                // –í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –∑ —É—Å—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å
                navLinks.forEach(navLink => navLink.classList.remove('active'));

                // –î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∫–ª–∞—Å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
                this.classList.add('active');

                smoothScrollTo(targetSection);

                // –ó–∞–∫—Ä–∏—Ç–∏ –º–æ–±—ñ–ª—å–Ω–µ –º–µ–Ω—é –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É
                if (isMenuOpen) {
                    toggleMobileMenu();
                }
            }
        });
    });

    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Å—Ç–∞–Ω –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ
    window.addEventListener('scroll', function() {
        let current = '';
        const sections = document.querySelectorAll('section[id]');

        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (scrollY >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === '#' + current) {
                link.classList.add('active');
            }
        });
    });

    // –ó–º—ñ–Ω–∞ –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ header –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç—Ü—ñ –±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è toggle –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
function toggleMobileMenu() {
    const navMenu = document.querySelector('.nav-menu');
    const mobileToggle = document.querySelector('.mobile-menu-toggle');

    isMenuOpen = !isMenuOpen;

    if (navMenu && mobileToggle) {
        if (isMenuOpen) {
            navMenu.style.display = 'flex';
            navMenu.style.flexDirection = 'column';
            navMenu.style.position = 'absolute';
            navMenu.style.top = '100%';
            navMenu.style.left = '0';
            navMenu.style.right = '0';
            navMenu.style.background = 'rgba(15, 15, 35, 0.98)';
            navMenu.style.padding = '2rem';
            navMenu.style.backdropFilter = 'blur(20px)';
            navMenu.style.borderTop = '1px solid rgba(255, 255, 255, 0.1)';

            // –ê–Ω—ñ–º–∞—Ü—ñ—è –∫–Ω–æ–ø–∫–∏
            mobileToggle.classList.add('active');
        } else {
            navMenu.style.display = 'none';
            mobileToggle.classList.remove('active');
        }
    }
}

// ===== FAQ ACCORDION –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–¨ =====
function initializeFAQ() {
    const faqItems = document.querySelectorAll('.faq-item');

    faqItems.forEach(item => {
        const question = item.querySelector('.faq-question');

        if (question) {
            question.addEventListener('click', function() {
                const isActive = item.classList.contains('active');

                // –ó–∞–∫—Ä–∏—Ç–∏ –≤—Å—ñ —ñ–Ω—à—ñ FAQ –µ–ª–µ–º–µ–Ω—Ç–∏
                faqItems.forEach(otherItem => {
                    if (otherItem !== item) {
                        otherItem.classList.remove('active');
                    }
                });

                // Toggle –ø–æ—Ç–æ—á–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
                if (isActive) {
                    item.classList.remove('active');
                } else {
                    item.classList.add('active');
                }

                // –î–æ–¥–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é
                addClickAnimation(question);
            });
        }
    });
}

// ===== –ï–§–ï–ö–¢–ò –ü–†–û–ö–†–£–¢–ö–ò –¢–ê –ê–ù–Ü–ú–ê–¶–Ü–á =====
function initializeScrollEffects() {
    // Intersection Observer –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ–π –ø–æ—è–≤–∏
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('fade-in-up');

                // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
                if (entry.target.classList.contains('feature-card')) {
                    setTimeout(() => {
                        entry.target.style.transform = 'translateY(0)';
                        entry.target.style.opacity = '1';
                    }, Math.random() * 300);
                }
            }
        });
    }, observerOptions);

    // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    const animatedElements = document.querySelectorAll('.feature-card, .stat-item, .faq-item, .section-header');
    animatedElements.forEach(el => {
        observer.observe(el);
    });
}

// ===== –ê–ù–Ü–ú–ê–¶–Ü–á –¢–ê –ï–§–ï–ö–¢–ò =====
function initializeAnimations() {
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ª–æ–≥–æ—Ç–∏–ø—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ñ
    const logoLarge = document.querySelector('.logo-icon-large');
    if (logoLarge) {
        logoLarge.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1) rotate(5deg)';
            this.style.boxShadow = '0 0 50px rgba(99, 102, 241, 0.8)';
        });

        logoLarge.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1) rotate(0deg)';
            this.style.boxShadow = '0 0 20px rgba(99, 102, 241, 0.3)';
        });
    }

    // –ê–Ω—ñ–º–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    animateCounters();

    // –ü–∞—Ä–∞–ª–∞–∫—Å –µ—Ñ–µ–∫—Ç –±—É–¥–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ updateScrollEffects()
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function animateCounters() {
    const counters = document.querySelectorAll('.stat-number');

    counters.forEach(counter => {
        const target = counter.textContent;
        const numericValue = parseInt(target.replace(/\D/g, ''));

        if (numericValue) {
            let current = 0;
            const increment = numericValue / 100;
            const timer = setInterval(() => {
                current += increment;
                if (current >= numericValue) {
                    counter.textContent = target;
                    clearInterval(timer);
                } else {
                    const suffix = target.includes('K') ? 'K+' : target.includes('%') ? '%' : '';
                    counter.textContent = Math.floor(current) + suffix;
                }
            }, 20);
        }
    });
}

// ===== –ö–ù–û–ü–ö–ò –¢–ê –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–Ü –ï–õ–ï–ú–ï–ù–¢–ò =====
function initializeButtons() {
    // –í—Å—ñ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å–∞–π—Ç—ñ
    const buttons = document.querySelectorAll('.btn');

    buttons.forEach(button => {
        // –ï—Ñ–µ–∫—Ç ripple –ø—Ä–∏ –∫–ª—ñ–∫—É
        button.addEventListener('click', function(e) {
            addRippleEffect(this, e);

            // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
            const buttonText = this.textContent.trim();

            if (buttonText.includes('–ö—É–ø–∏—Ç–∏') || buttonText.includes('–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏')) {
                handlePurchaseClick();
            } else if (buttonText.includes('–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ')) {
                smoothScrollTo(document.querySelector('#features'));
            }
        });

        // Hover –µ—Ñ–µ–∫—Ç–∏
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-3px) scale(1.02)';
        });

        button.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
        });
    });
}
// ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

// –ü–ª–∞–≤–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
function smoothScrollTo(element) {
    if (element) {
        const headerHeight = document.querySelector('.header').offsetHeight;
        const elementPosition = element.offsetTop - headerHeight - 20;

        window.scrollTo({
            top: elementPosition,
            behavior: 'smooth'
        });
    }
}

// –ï—Ñ–µ–∫—Ç ripple –¥–ª—è –∫–Ω–æ–ø–æ–∫
function addRippleEffect(button, event) {
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;

    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.classList.add('ripple');

    // –î–æ–¥–∞—Ç–∏ —Å—Ç–∏–ª—ñ –¥–ª—è ripple –µ—Ñ–µ–∫—Ç—É
    ripple.style.position = 'absolute';
    ripple.style.borderRadius = '50%';
    ripple.style.background = 'rgba(255, 255, 255, 0.3)';
    ripple.style.transform = 'scale(0)';
    ripple.style.animation = 'ripple-animation 0.6s linear';
    ripple.style.pointerEvents = 'none';

    button.style.position = 'relative';
    button.style.overflow = 'hidden';
    button.appendChild(ripple);

    // –í–∏–¥–∞–ª–∏—Ç–∏ ripple –ø—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    setTimeout(() => {
        ripple.remove();
    }, 600);
}

// –ê–Ω—ñ–º–∞—Ü—ñ—è –∫–ª—ñ–∫—É
function addClickAnimation(element) {
    element.style.transform = 'scale(0.98)';
    setTimeout(() => {
        element.style.transform = 'scale(1)';
    }, 150);
}

// –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
function handlePurchaseClick() {
    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∞–±–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç–∏
    showNotification('üöÄ –î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ Leonar Client! –ù–µ–∑–∞–±–∞—Ä–æ–º –≤–∏ –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–∫—É–ø–∫–∏.', 'success');

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –æ–ø–ª–∞—Ç–∏
    setTimeout(() => {
        console.log('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–∫—É–ø–∫–∏...');
        // window.location.href = '/purchase';
    }, 2000);
}

// –°–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    // –°—Ç–∏–ª—ñ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    notification.style.position = 'fixed';
    notification.style.top = '20px';
    notification.style.right = '20px';
    notification.style.padding = '1rem 1.5rem';
    notification.style.borderRadius = '12px';
    notification.style.color = 'white';
    notification.style.fontWeight = '600';
    notification.style.zIndex = '10000';
    notification.style.maxWidth = '400px';
    notification.style.boxShadow = '0 10px 25px rgba(0, 0, 0, 0.2)';
    notification.style.backdropFilter = 'blur(10px)';
    notification.style.transform = 'translateX(100%)';
    notification.style.transition = 'transform 0.3s ease-out';

    // –ö–æ–ª—å–æ—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
    switch(type) {
        case 'success':
            notification.style.background = 'linear-gradient(135deg, #10b981, #059669)';
            break;
        case 'error':
            notification.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
            break;
        case 'warning':
            notification.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
            break;
        default:
            notification.style.background = 'linear-gradient(135deg, #6366f1, #8b5cf6)';
    }

    document.body.appendChild(notification);

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 5000);

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É
    notification.addEventListener('click', () => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            notification.remove();
        }, 300);
    });
}

// ===== –î–û–î–ê–¢–ö–û–í–Ü –ï–§–ï–ö–¢–ò –¢–ê –ê–ù–Ü–ú–ê–¶–Ü–á =====

// –ï—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–Ω—è –¥–ª—è —Ç–µ–∫—Å—Ç—É
function typeWriter(element, text, speed = 50) {
    let i = 0;
    element.textContent = '';

    function type() {
        if (i < text.length) {
            element.textContent += text.charAt(i);
            i++;
            setTimeout(type, speed);
        }
    }

    type();
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ—Å–º—ñ—á–Ω–∏—Ö —á–∞—Å—Ç–∏–Ω–æ–∫ (–∑—ñ—Ä–æ–∫)
function createSpaceStar() {
    const star = document.createElement('div');
    star.style.position = 'fixed';
    star.style.width = Math.random() * 3 + 1 + 'px';
    star.style.height = star.style.width;
    star.style.background = '#ffffff';
    star.style.borderRadius = '50%';
    star.style.left = Math.random() * window.innerWidth + 'px';
    star.style.top = '-10px';
    star.style.pointerEvents = 'none';
    star.style.zIndex = '-1';
    star.style.boxShadow = `0 0 ${Math.random() * 10 + 5}px rgba(255, 255, 255, 0.8)`;

    document.body.appendChild(star);

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–∞–¥—ñ–Ω–Ω—è –∑—ñ—Ä–∫–∏
    const duration = Math.random() * 4000 + 3000;
    const horizontalMove = Math.random() * 200 - 100;

    const animation = star.animate([
        {
            transform: 'translateY(-10px) translateX(0px)',
            opacity: 0
        },
        {
            transform: 'translateY(20px) translateX(10px)',
            opacity: 1,
            offset: 0.1
        },
        {
            transform: `translateY(${window.innerHeight + 50}px) translateX(${horizontalMove}px)`,
            opacity: 0
        }
    ], {
        duration: duration,
        easing: 'linear'
    });

    animation.onfinish = () => {
        star.remove();
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–º–µ—Ç
function createComet() {
    const comet = document.createElement('div');
    comet.style.position = 'fixed';
    comet.style.width = '3px';
    comet.style.height = '3px';
    comet.style.background = '#ffffff';
    comet.style.borderRadius = '50%';
    comet.style.left = '-50px';
    comet.style.top = Math.random() * (window.innerHeight * 0.7) + 'px';
    comet.style.pointerEvents = 'none';
    comet.style.zIndex = '-1';
    comet.style.boxShadow = '0 0 15px rgba(255, 255, 255, 0.9)';

    // –•–≤—ñ—Å—Ç –∫–æ–º–µ—Ç–∏
    const tail = document.createElement('div');
    tail.style.position = 'absolute';
    tail.style.width = '80px';
    tail.style.height = '2px';
    tail.style.background = 'linear-gradient(to right, rgba(255, 255, 255, 0.8), transparent)';
    tail.style.top = '1px';
    tail.style.left = '-80px';
    tail.style.transform = 'rotate(-20deg)';
    comet.appendChild(tail);

    document.body.appendChild(comet);

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ–ª—å–æ—Ç—É –∫–æ–º–µ—Ç–∏
    const duration = Math.random() * 2000 + 1500;
    const animation = comet.animate([
        {
            transform: 'translateX(-50px) translateY(0px)',
            opacity: 0
        },
        {
            transform: 'translateX(50px) translateY(-20px)',
            opacity: 1,
            offset: 0.2
        },
        {
            transform: `translateX(${window.innerWidth + 100}px) translateY(-${Math.random() * 200 + 100}px)`,
            opacity: 0
        }
    ], {
        duration: duration,
        easing: 'ease-out'
    });

    animation.onfinish = () => {
        comet.remove();
    };
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ—Å–º—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤
setInterval(createSpaceStar, 800);
setInterval(createComet, 4000);

// ===== –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö –¢–ê –í–Ü–î–õ–ê–î–ö–ê =====
window.addEventListener('error', function(e) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç—ñ:', e.error);
});

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
function getScrollPosition() {
    return window.scrollY || document.documentElement.scrollTop;
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
function updateScrollEffects() {
    window.addEventListener('scroll', function() {
        const scrolled = getScrollPosition();
        const header = document.querySelector('.header');

        if (header) {
            if (scrolled > 100) {
                header.style.background = 'rgba(15, 15, 35, 0.95)';
            } else {
                header.style.background = 'rgba(15, 15, 35, 0.8)';
            }
        }

        // –ü–∞—Ä–∞–ª–∞–∫—Å –µ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω—É
        const parallaxElements = document.querySelectorAll('.floating-particles, .grid-overlay');
        parallaxElements.forEach(element => {
            const speed = 0.5;
            element.style.transform = `translateY(${scrolled * speed}px)`;
        });
    });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
updateScrollEffects();

// ===== –î–û–î–ê–í–ê–ù–ù–Ø CSS –ê–ù–Ü–ú–ê–¶–Ü–ô –ß–ï–†–ï–ó JAVASCRIPT =====
const style = document.createElement('style');
style.textContent = `
    @keyframes ripple-animation {
        to {
            transform: scale(4);
            opacity: 0;
        }
    }

    .notification {
        font-family: 'Inter', sans-serif;
        cursor: pointer;
    }

    .notification:hover {
        transform: translateX(-5px) !important;
    }
`;
document.head.appendChild(style);

// ===== –§–Ü–ù–ê–õ–¨–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø =====
console.log('‚úÖ –í—Å—ñ JavaScript –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ Leonar Client —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
